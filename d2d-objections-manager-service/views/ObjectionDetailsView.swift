//
//  EditObjectionView.swift
//  d2d-map-service
//
//  Created by Emin Okic on 6/29/25.
//
import SwiftUI

struct ObjectionDetailsView: View {
    @Environment(\.dismiss) var dismiss
    @Environment(\.modelContext) private var modelContext
    @Bindable var objection: Objection

    private let manager = ObjectionManager()
    
    @State private var showRegenerateAlert = false
    
    @State private var showDeleteAlert = false

    var body: some View {
        NavigationView {
            VStack(spacing: 4) {
                
                // MARK: - Custom Header
                Text("The Objection Details")
                    .font(.title)
                    .fontWeight(.bold)
                    .frame(maxWidth: .infinity, alignment: .leading)
                    .padding(20)
                    .background(Color(.systemGroupedBackground))
                
                Form {
                    
                    Section {
                        VStack(alignment: .leading, spacing: 4) {
                            Text("Objection")
                                .font(.headline)
                            
                            Text("The exact phrase a prospect says when rejecting your offer.")
                                .font(.footnote)
                                .foregroundColor(.secondary)
                        }
                        .padding(.vertical, 4)
                        
                        VStack(alignment: .leading, spacing: 4) {
                            TextField("Enter your objection here...", text: $objection.text)
                        }
                        .padding(.vertical, 4)
                    }
                    
                    // EXPECTED RESPONSE
                    Section() {
                        
                        VStack(alignment: .leading, spacing: 4) {
                            
                            HStack {
                                Text("Expected Response")
                                    .font(.headline)
                                Spacer()
                                Button {
                                    showRegenerateAlert = true
                                } label: {
                                    Image(systemName: "arrow.clockwise")
                                        .foregroundColor(.blue)
                                }
                                .buttonStyle(.plain)
                                .accessibilityLabel("Regenerate Response")
                            }
                            .padding(4)
                            
                            Text("What you should say when this objection comes up. This can be autogenerated or edited manually.")
                                .font(.footnote)
                                .foregroundColor(.secondary)
                                .padding(4)
                        }
                        .padding(.vertical, 4)
                        
                        VStack(alignment: .leading, spacing: 4) {

                            TextEditor(text: $objection.response)
                                .frame(minHeight: 120)
                                .padding(.vertical, 4)
                        }
                        .padding(.vertical, 4)
                        
                    }
                    
                    Section() {
                        
                        VStack(alignment: .leading, spacing: 4) {
                            
                            Text("Times Heard")
                                .font(.headline)
                            
                            Text("Tracks how often you've heard this objection while knocking.")
                                .font(.footnote)
                                .foregroundColor(.secondary)
                        }
                        .padding(.vertical, 4)
                        
                        VStack(alignment: .leading, spacing: 4) {
                            
                            Stepper("\(objection.timesHeard)", value: $objection.timesHeard, in: 0...1000)
                        }
                        .padding(.vertical, 4)
                    }
                    
                }
            }
            .navigationTitle("")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                // Done button – far right
                ToolbarItem(placement: .primaryAction) {
                    Button("Done") {
                        dismiss()
                    }
                }

                // Delete button – just to the left of Done
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button(role: .destructive) {
                        showDeleteAlert = true
                    } label: {
                        Image(systemName: "trash")
                    }
                    .accessibilityLabel("Delete Objection")
                }
            }
            .alert("Delete this objection?", isPresented: $showDeleteAlert) {
                Button("Delete", role: .destructive) {
                    manager.delete(objection, from: modelContext)
                    dismiss()
                }
                Button("Cancel", role: .cancel) { }
            } message: {
                Text("This action cannot be undone.")
            }
            .alert("Regenerate response?", isPresented: $showRegenerateAlert) {
                Button("Yes", role: .destructive) {
                    Task {
                        objection.response = await ResponseGenerator.shared.generate(for: objection.text)
                        try? modelContext.save()
                    }
                }
                Button("Cancel", role: .cancel) { }
            } message: {
                Text("This will overwrite the current response with a new one based on the objection.")
            }
        }
    }
}
